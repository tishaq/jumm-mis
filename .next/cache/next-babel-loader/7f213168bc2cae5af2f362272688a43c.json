{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ahmedt/ajisaq/jumm-mis/components/Page.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\nAmplify.configure(awsconfig);\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      // Auth.currentAuthenticatedUser({\n      //   bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n      // })\n      //   .then(user => console.log(user))\n      //   .catch(err => console.log(err));\n      // async function SignIn() {\n      //   try {\n      //     const user = await Auth.signIn(username, password);\n      //     if (\n      //       user.challengeName === \"SMS_MFA\" ||\n      //       user.challengeName === \"SOFTWARE_TOKEN_MFA\"\n      //     ) {\n      //       // You need to get the code from the UI inputs\n      //       // and then trigger the following function with a button click\n      //       const code = getCodeFromUserInput();\n      //       // If MFA is enabled, sign-in should be confirmed with the confirmation code\n      //       const loggedUser = await Auth.confirmSignIn(\n      //         user, // Return object from Auth.signIn()\n      //         code, // Confirmation code\n      //         mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n      //       );\n      //     } else if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n      //       const { requiredAttributes } = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n      //       // You need to get the new password and required attributes from the UI inputs\n      //       // and then trigger the following function with a button click\n      //       // For example, the email and phone_number are required attributes\n      //       const { username, email, phone_number } = getInfoFromUserInput();\n      //       const loggedUser = await Auth.completeNewPassword(\n      //         user, // the Cognito User Object\n      //         newPassword, // the new password\n      //         // OPTIONAL, the required attributes\n      //         {\n      //           email,\n      //           phone_number\n      //         }\n      //       );\n      //     } else if (user.challengeName === \"MFA_SETUP\") {\n      //       // This happens when the MFA method is TOTP\n      //       // The user needs to setup the TOTP before using it\n      //       // More info please check the Enabling MFA part\n      //       Auth.setupTOTP(user);\n      //     } else {\n      //       // The user directly signs in\n      //       console.log(user);\n      //     }\n      //   } catch (err) {\n      //     if (err.code === \"UserNotConfirmedException\") {\n      //       // The error happens if the user didn't finish the confirmation step when signing up\n      //       // In this case you need to resend the code and confirm the user\n      //       // About how to resend the code and confirm the user, please check the signUp part\n      //     } else if (err.code === \"PasswordResetRequiredException\") {\n      //       // The error happens when the password is reset in the Cognito console\n      //       // In this case you need to call forgotPassword to reset the password\n      //       // Please check the Forgot Password part.\n      //     } else if (err.code === \"NotAuthorizedException\") {\n      //       // The error happens when the incorrect password is provided\n      //     } else if (err.code === \"UserNotFoundException\") {\n      //       // The error happens when the supplied username/email does not exist in the Cognito user pool\n      //     } else {\n      //       console.log(err);\n      //     }\n      //   }\n      // }\n      return __jsx(React.Fragment, null, __jsx(Meta, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), __jsx(\"main\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, __jsx(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), this.props.children, __jsx(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default Page;","map":{"version":3,"sources":["/home/ahmedt/ajisaq/jumm-mis/components/Page.js"],"names":["React","Component","Header","Footer","Meta","Amplify","Auth","withAuthenticator","awsconfig","configure","Page","props","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,IAAkBC,IAAlB,QAA8B,aAA9B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEAH,OAAO,CAACI,SAAR,CAAkBD,SAAlB;;IAEME,I;;;;;;;;;;;;;6BACK;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGG,KAAKC,KAAL,CAAWC,QAHd,EAIE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CAFF,CADF;AAWD;;;;EA5EgBX,S;;AA8EnB,eAAeS,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\n\nAmplify.configure(awsconfig);\n\nclass Page extends Component {\n  render() {\n    // Auth.currentAuthenticatedUser({\n    //   bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n    // })\n    //   .then(user => console.log(user))\n    //   .catch(err => console.log(err));\n    // async function SignIn() {\n    //   try {\n    //     const user = await Auth.signIn(username, password);\n    //     if (\n    //       user.challengeName === \"SMS_MFA\" ||\n    //       user.challengeName === \"SOFTWARE_TOKEN_MFA\"\n    //     ) {\n    //       // You need to get the code from the UI inputs\n    //       // and then trigger the following function with a button click\n    //       const code = getCodeFromUserInput();\n    //       // If MFA is enabled, sign-in should be confirmed with the confirmation code\n    //       const loggedUser = await Auth.confirmSignIn(\n    //         user, // Return object from Auth.signIn()\n    //         code, // Confirmation code\n    //         mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n    //       );\n    //     } else if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n    //       const { requiredAttributes } = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n    //       // You need to get the new password and required attributes from the UI inputs\n    //       // and then trigger the following function with a button click\n    //       // For example, the email and phone_number are required attributes\n    //       const { username, email, phone_number } = getInfoFromUserInput();\n    //       const loggedUser = await Auth.completeNewPassword(\n    //         user, // the Cognito User Object\n    //         newPassword, // the new password\n    //         // OPTIONAL, the required attributes\n    //         {\n    //           email,\n    //           phone_number\n    //         }\n    //       );\n    //     } else if (user.challengeName === \"MFA_SETUP\") {\n    //       // This happens when the MFA method is TOTP\n    //       // The user needs to setup the TOTP before using it\n    //       // More info please check the Enabling MFA part\n    //       Auth.setupTOTP(user);\n    //     } else {\n    //       // The user directly signs in\n    //       console.log(user);\n    //     }\n    //   } catch (err) {\n    //     if (err.code === \"UserNotConfirmedException\") {\n    //       // The error happens if the user didn't finish the confirmation step when signing up\n    //       // In this case you need to resend the code and confirm the user\n    //       // About how to resend the code and confirm the user, please check the signUp part\n    //     } else if (err.code === \"PasswordResetRequiredException\") {\n    //       // The error happens when the password is reset in the Cognito console\n    //       // In this case you need to call forgotPassword to reset the password\n    //       // Please check the Forgot Password part.\n    //     } else if (err.code === \"NotAuthorizedException\") {\n    //       // The error happens when the incorrect password is provided\n    //     } else if (err.code === \"UserNotFoundException\") {\n    //       // The error happens when the supplied username/email does not exist in the Cognito user pool\n    //     } else {\n    //       console.log(err);\n    //     }\n    //   }\n    // }\n    return (\n      <>\n        <Meta />\n        <main className=\"content\">\n          <Header />\n\n          {this.props.children}\n          <Footer />\n        </main>\n      </>\n    );\n  }\n}\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}