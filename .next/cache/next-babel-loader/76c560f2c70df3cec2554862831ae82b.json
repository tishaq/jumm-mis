{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nvar _jsxFileName = \"/home/ahmedt/ajisaq/jumm-mis/pages/remit.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"../src/graphql/queries\";\n\nclass remit extends Component {\n  //static async getInitialProps() {}\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"search-items\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Select the range of dates to view summary Maximum of 30 days\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"From:\", __jsx(\"input\", {\n      name: \"datepicker1\",\n      type: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), \"To:\", __jsx(\"input\", {\n      name: \"datepicker2\",\n      type: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), __jsx(\"input\", {\n      name: \"load\",\n      type: \"button\",\n      value: \"Load\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }))))), __jsx(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, tck[0]), __jsx(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"S/N\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Revenue Source\"), __jsx(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Amount\"))), __jsx(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, _Object$entries(this.props.data).map((tck, index) => __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, index + 1), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, tck[0]), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"N\", tck[1].reduce((x, y) => x + y))))))))));\n  }\n\n}\n\nremit.getInitialProps = async function () {\n  let nextToken = null;\n  let results = [];\n  let errors;\n  let raw = {};\n  let tickets = {};\n\n  try {\n    do {\n      raw = await API.graphql(graphqlOperation(queries.listTickets, {\n        limit: 10000,\n        nextToken: nextToken\n      }));\n      nextToken = raw.data.listTickets.nextToken;\n      raw.data.listTickets.items.map(value => results.push(value));\n    } while (nextToken);\n  } catch (error) {\n    errors = error;\n  }\n\n  results.map(t => {\n    if (!tickets[t.deviceName]) {\n      tickets[t.deviceName] = [];\n    }\n\n    tickets[t.deviceName].push(_parseInt(t.fee));\n  });\n  return {\n    data: tickets,\n    errors: errors\n  };\n};\n\nexport default remit;","map":{"version":3,"sources":["/home/ahmedt/ajisaq/jumm-mis/pages/remit.js"],"names":["React","Component","API","graphqlOperation","queries","remit","render","tck","props","data","map","index","reduce","x","y","getInitialProps","nextToken","results","errors","raw","tickets","graphql","listTickets","limit","items","value","push","error","t","deviceName","fee"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"../src/graphql/queries\";\nclass remit extends Component {\n  //static async getInitialProps() {}\n  render() {\n    return (\n      <>\n        <div className=\"header\">\n          <form>\n            <div className=\"search-items\">\n              <p>\n                Select the range of dates to view summary Maximum of 30 days\n              </p>\n\n              <div>\n                From:\n                <input name=\"datepicker1\" type=\"date\" />\n                To:\n                <input name=\"datepicker2\" type=\"date\" />\n                <input name=\"load\" type=\"button\" value=\"Load\" />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div className=\"main\">\n          <div className=\"card\">\n            <div className=\"card-title\">{tck[0]}</div>\n            <div className=\"card-body\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>S/N</th>\n                    <th>Revenue Source</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.entries(this.props.data).map((tck, index) => (\n                    <tr>\n                      <td>{index + 1}</td>\n                      <td>{tck[0]}</td>\n                      <td>N{tck[1].reduce((x, y) => x + y)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nremit.getInitialProps = async function() {\n  let nextToken = null;\n  let results = [];\n  let errors;\n  let raw = {};\n  let tickets = {};\n  try {\n    do {\n      raw = await API.graphql(\n        graphqlOperation(queries.listTickets, {\n          limit: 10000,\n          nextToken: nextToken\n        })\n      );\n      nextToken = raw.data.listTickets.nextToken;\n      raw.data.listTickets.items.map(value => results.push(value));\n    } while (nextToken);\n  } catch (error) {\n    errors = error;\n  }\n  results.map(t => {\n    if (!tickets[t.deviceName]) {\n      tickets[t.deviceName] = [];\n    }\n    tickets[t.deviceName].push(parseInt(t.fee));\n  });\n  return { data: tickets, errors: errors };\n};\n\nexport default remit;\n"]},"metadata":{},"sourceType":"module"}