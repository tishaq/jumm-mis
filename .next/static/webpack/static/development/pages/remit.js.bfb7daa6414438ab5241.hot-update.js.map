{"version":3,"file":"static/webpack/static/development/pages/remit.js.bfb7daa6414438ab5241.hot-update.js","sources":["webpack:///./pages/remit.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"../src/graphql/queries\";\nclass remit extends Component {\n  //static async getInitialProps() {}\n  render() {\n    return (\n      <>\n        <div className=\"header\">\n          <form>\n            <div className=\"search-items\">\n              <p>\n                Select the range of dates to view summary Maximum of 30 days\n              </p>\n\n              <div>\n                From:\n                <input name=\"datepicker1\" type=\"date\" />\n                To:\n                <input name=\"datepicker2\" type=\"date\" />\n                <input name=\"load\" type=\"button\" value=\"Load\" />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div className=\"main\">\n          {Object.entries(this.props.data).map(tck => (\n            <div className=\"card\">\n              <div className=\"card-title\">{tck[0]}</div>\n              <div className=\"card-body\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>S/N</th>\n                      <th>Item Name</th>\n                      <th>Fee</th>\n                      <th>Quantity</th>\n                      <th>Amount</th>\n                    </tr>\n                  </thead>\n\n                  {Object.entries(tck[1]).map(cat => (\n                    <tbody>\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>{cat[0]}</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                      {Object.entries(cat[1]).map((item, index) => (\n                        <tr>\n                          <td>{index + 1}</td>\n                          <td>{item[0]}</td>\n                          <td>N{item[1][0]}</td>\n                          <td>{item[1].length}</td>\n                          <td>N{item[1].reduce((x, y) => x + y)}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  ))}\n                </table>\n              </div>\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\ngate.getInitialProps = async function() {\n  let nextToken = null;\n  let results = [];\n  let errors;\n  let raw = {};\n  let tickets = {};\n  try {\n    do {\n      raw = await API.graphql(\n        graphqlOperation(queries.listTickets, {\n          limit: 10000,\n          nextToken: nextToken\n        })\n      );\n      nextToken = raw.data.listTickets.nextToken;\n      raw.data.listTickets.items.map(value => results.push(value));\n    } while (nextToken);\n  } catch (error) {\n    errors = error;\n  }\n  results.map(t => {\n    if (!tickets[t.deviceName]) {\n      tickets[t.deviceName] = {};\n    }\n    if (!tickets[t.deviceName][t.receiptType]) {\n      tickets[t.deviceName][t.receiptType] = {};\n    }\n    if (!tickets[t.deviceName][t.receiptType][t.itemType]) {\n      tickets[t.deviceName][t.receiptType][t.itemType] = [];\n    }\n    tickets[t.deviceName][t.receiptType][t.itemType].push(parseInt(t.fee));\n  });\n  return { data: tickets, errors: errors };\n};\n\nexport default remit;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AATA;AAfA;AA0CA;;;;AAlEA;AACA;AAmEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAFA;AACA;AAVA;AAQA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA/BA;AAgCA;AAAA;AAAA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkCA;;;;A","sourceRoot":""}