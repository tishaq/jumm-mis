{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/home/ahmedt/ajisaq/jumm-mis/pages/listFacility.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\n\nvar listFacility = function listFacility(props) {\n  return __jsx(React.Fragment, null, console.log(props), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, props.facilityType));\n};\n\nlistFacility.getInitialProps = function _callee(_ref) {\n  var query, nextToken, results, errors, raw, facilities;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          nextToken = null;\n          results = [];\n          raw = {};\n          facilities = {};\n          _context.prev = 5;\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(queries.listFacilitys, {\n            filter: {\n              facilityType: {\n                eq: query.facilityType\n              }\n            },\n            limit: 10000,\n            nextToken: nextToken\n          })));\n\n        case 8:\n          raw = _context.sent;\n          nextToken = raw.data.listFacilitys.nextToken;\n          raw.data.listFacilitys.items.map(function (value) {\n            return results.push(value);\n          });\n\n        case 11:\n          if (nextToken) {\n            _context.next = 6;\n            break;\n          }\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](5);\n          errors = _context.t0;\n\n        case 17:\n          return _context.abrupt(\"return\", {\n            data: results,\n            facilityType: query.facilityType\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[5, 14]]);\n};\n\nexport default listFacility;","map":{"version":3,"sources":["/home/ahmedt/ajisaq/jumm-mis/pages/listFacility.js"],"names":["React","Component","listFacility","props","console","log","facilityType","getInitialProps","query","nextToken","results","raw","facilities","API","graphql","graphqlOperation","queries","listFacilitys","filter","eq","limit","data","items","map","value","push","errors"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,SACxB,4BACGC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAK,CAACG,YAAV,CAFF,CADwB;AAAA,CAA1B;;AAMAJ,YAAY,CAACK,eAAb,GAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,UAAAA,KAAjB,QAAiBA,KAAjB;AACzBC,UAAAA,SADyB,GACb,IADa;AAEzBC,UAAAA,OAFyB,GAEf,EAFe;AAIzBC,UAAAA,GAJyB,GAInB,EAJmB;AAKzBC,UAAAA,UALyB,GAKZ,EALY;AAAA;;AAAA;AAAA;AAAA,2CAQbC,GAAG,CAACC,OAAJ,CACVC,gBAAgB,CAACC,OAAO,CAACC,aAAT,EAAwB;AACtCC,YAAAA,MAAM,EAAE;AAAEZ,cAAAA,YAAY,EAAE;AAAEa,gBAAAA,EAAE,EAAEX,KAAK,CAACF;AAAZ;AAAhB,aAD8B;AAEtCc,YAAAA,KAAK,EAAE,KAF+B;AAGtCX,YAAAA,SAAS,EAAEA;AAH2B,WAAxB,CADN,CARa;;AAAA;AAQzBE,UAAAA,GARyB;AAezBF,UAAAA,SAAS,GAAGE,GAAG,CAACU,IAAJ,CAASJ,aAAT,CAAuBR,SAAnC;AACAE,UAAAA,GAAG,CAACU,IAAJ,CAASJ,aAAT,CAAuBK,KAAvB,CAA6BC,GAA7B,CAAiC,UAAAC,KAAK;AAAA,mBAAId,OAAO,CAACe,IAAR,CAAaD,KAAb,CAAJ;AAAA,WAAtC;;AAhByB;AAAA,cAiBlBf,SAjBkB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmB3BiB,UAAAA,MAAM,cAAN;;AAnB2B;AAAA,2CAqBtB;AAAEL,YAAAA,IAAI,EAAEX,OAAR;AAAiBJ,YAAAA,YAAY,EAAEE,KAAK,CAACF;AAArC,WArBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;;AAuBA,eAAeJ,YAAf","sourcesContent":["import React, { Component } from \"react\";\nconst listFacility = props => (\n  <>\n    {console.log(props)}\n    <p>{props.facilityType}</p>\n  </>\n);\nlistFacility.getInitialProps = async function({ query }) {\n  let nextToken = null;\n  let results = [];\n  let errors;\n  let raw = {};\n  let facilities = {};\n  try {\n    do {\n      raw = await API.graphql(\n        graphqlOperation(queries.listFacilitys, {\n          filter: { facilityType: { eq: query.facilityType } },\n          limit: 10000,\n          nextToken: nextToken\n        })\n      );\n      nextToken = raw.data.listFacilitys.nextToken;\n      raw.data.listFacilitys.items.map(value => results.push(value));\n    } while (nextToken);\n  } catch (error) {\n    errors = error;\n  }\n  return { data: results, facilityType: query.facilityType };\n};\nexport default listFacility;\n"]},"metadata":{},"sourceType":"module"}