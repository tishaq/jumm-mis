{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ahmedt/ajisaq/jumm-mis/components/Page.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\nAmplify.configure(awsconfig);\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      Auth.currentAuthenticatedUser({\n        bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n\n      }).then(function (user) {\n        return console.log(user);\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n\n      function SignIn() {\n        var user, code, loggedUser, requiredAttributes, _getInfoFromUserInput, _username, email, phone_number, _loggedUser;\n\n        return _regeneratorRuntime.async(function SignIn$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(Auth.signIn(username, password));\n\n              case 3:\n                user = _context.sent;\n\n                if (!(user.challengeName === \"SMS_MFA\" || user.challengeName === \"SOFTWARE_TOKEN_MFA\")) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // You need to get the code from the UI inputs\n                // and then trigger the following function with a button click\n                code = getCodeFromUserInput(); // If MFA is enabled, sign-in should be confirmed with the confirmation code\n\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(Auth.confirmSignIn(user, // Return object from Auth.signIn()\n                code, // Confirmation code\n                mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n                ));\n\n              case 8:\n                loggedUser = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 11:\n                if (!(user.challengeName === \"NEW_PASSWORD_REQUIRED\")) {\n                  _context.next = 19;\n                  break;\n                }\n\n                requiredAttributes = user.challengeParam.requiredAttributes; // the array of required attributes, e.g ['email', 'phone_number']\n                // You need to get the new password and required attributes from the UI inputs\n                // and then trigger the following function with a button click\n                // For example, the email and phone_number are required attributes\n\n                _getInfoFromUserInput = getInfoFromUserInput(), _username = _getInfoFromUserInput.username, email = _getInfoFromUserInput.email, phone_number = _getInfoFromUserInput.phone_number;\n                _context.next = 16;\n                return _regeneratorRuntime.awrap(Auth.completeNewPassword(user, // the Cognito User Object\n                newPassword, // the new password\n                // OPTIONAL, the required attributes\n                {\n                  email: email,\n                  phone_number: phone_number\n                }));\n\n              case 16:\n                _loggedUser = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 19:\n                if (user.challengeName === \"MFA_SETUP\") {\n                  // This happens when the MFA method is TOTP\n                  // The user needs to setup the TOTP before using it\n                  // More info please check the Enabling MFA part\n                  Auth.setupTOTP(user);\n                } else {\n                  // The user directly signs in\n                  console.log(user);\n                }\n\n              case 20:\n                _context.next = 25;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0.code === \"UserNotConfirmedException\") {// The error happens if the user didn't finish the confirmation step when signing up\n                  // In this case you need to resend the code and confirm the user\n                  // About how to resend the code and confirm the user, please check the signUp part\n                } else if (_context.t0.code === \"PasswordResetRequiredException\") {// The error happens when the password is reset in the Cognito console\n                  // In this case you need to call forgotPassword to reset the password\n                  // Please check the Forgot Password part.\n                } else if (_context.t0.code === \"NotAuthorizedException\") {// The error happens when the incorrect password is provided\n                } else if (_context.t0.code === \"UserNotFoundException\") {// The error happens when the supplied username/email does not exist in the Cognito user pool\n                } else {\n                  console.log(_context.t0);\n                }\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 22]]);\n      }\n\n      return __jsx(React.Fragment, null, __jsx(Meta, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), __jsx(\"main\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, __jsx(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), this.props.children, __jsx(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default withAuthenticator(Page, true);","map":{"version":3,"sources":["/home/ahmedt/ajisaq/jumm-mis/components/Page.js"],"names":["React","Component","Header","Footer","Meta","Amplify","Auth","withAuthenticator","awsconfig","configure","Page","currentAuthenticatedUser","bypassCache","then","user","console","log","err","SignIn","signIn","username","password","challengeName","code","getCodeFromUserInput","confirmSignIn","mfaType","loggedUser","requiredAttributes","challengeParam","getInfoFromUserInput","email","phone_number","completeNewPassword","newPassword","setupTOTP","props","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\n\nAmplify.configure(awsconfig);\n\nclass Page extends Component {\n  render() {\n    Auth.currentAuthenticatedUser({\n      bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n    })\n      .then(user => console.log(user))\n      .catch(err => console.log(err));\n    async function SignIn() {\n      try {\n        const user = await Auth.signIn(username, password);\n        if (\n          user.challengeName === \"SMS_MFA\" ||\n          user.challengeName === \"SOFTWARE_TOKEN_MFA\"\n        ) {\n          // You need to get the code from the UI inputs\n          // and then trigger the following function with a button click\n          const code = getCodeFromUserInput();\n          // If MFA is enabled, sign-in should be confirmed with the confirmation code\n          const loggedUser = await Auth.confirmSignIn(\n            user, // Return object from Auth.signIn()\n            code, // Confirmation code\n            mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n          );\n        } else if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n          const { requiredAttributes } = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n          // You need to get the new password and required attributes from the UI inputs\n          // and then trigger the following function with a button click\n          // For example, the email and phone_number are required attributes\n          const { username, email, phone_number } = getInfoFromUserInput();\n          const loggedUser = await Auth.completeNewPassword(\n            user, // the Cognito User Object\n            newPassword, // the new password\n            // OPTIONAL, the required attributes\n            {\n              email,\n              phone_number\n            }\n          );\n        } else if (user.challengeName === \"MFA_SETUP\") {\n          // This happens when the MFA method is TOTP\n          // The user needs to setup the TOTP before using it\n          // More info please check the Enabling MFA part\n          Auth.setupTOTP(user);\n        } else {\n          // The user directly signs in\n          console.log(user);\n        }\n      } catch (err) {\n        if (err.code === \"UserNotConfirmedException\") {\n          // The error happens if the user didn't finish the confirmation step when signing up\n          // In this case you need to resend the code and confirm the user\n          // About how to resend the code and confirm the user, please check the signUp part\n        } else if (err.code === \"PasswordResetRequiredException\") {\n          // The error happens when the password is reset in the Cognito console\n          // In this case you need to call forgotPassword to reset the password\n          // Please check the Forgot Password part.\n        } else if (err.code === \"NotAuthorizedException\") {\n          // The error happens when the incorrect password is provided\n        } else if (err.code === \"UserNotFoundException\") {\n          // The error happens when the supplied username/email does not exist in the Cognito user pool\n        } else {\n          console.log(err);\n        }\n      }\n    }\n    return (\n      <>\n        <Meta />\n        <main className=\"content\">\n          <Header />\n          {this.props.children}\n          <Footer />\n        </main>\n      </>\n    );\n  }\n}\nexport default withAuthenticator(Page, true);\n"]},"metadata":{},"sourceType":"module"}