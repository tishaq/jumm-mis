{"version":3,"file":"static/webpack/static/development/pages/remit.js.9a88336b506a35f2208b.hot-update.js","sources":["webpack:///./pages/remit.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from \"../src/graphql/queries\";\nclass remit extends Component {\n  //static async getInitialProps() {}\n  render() {\n    return (\n      <>\n        <div className=\"header\">\n          <form>\n            <div className=\"search-items\">\n              <p>\n                Select the range of dates to view summary Maximum of 30 days\n              </p>\n\n              <div>\n                From:\n                <input name=\"datepicker1\" type=\"date\" />\n                To:\n                <input name=\"datepicker2\" type=\"date\" />\n                <input name=\"load\" type=\"button\" value=\"Load\" />\n              </div>\n            </div>\n          </form>\n        </div>\n\n        <div className=\"main\">\n          <div className=\"card-list\">\n            <div className=\"card-title\">Transaction Summary</div>\n            <div className=\"card-body\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>S/N</th>\n                    <th>Revenue Source</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.entries(this.props.data).map((tck, index) => (\n                    <tr>\n                      <td>{index + 1}</td>\n                      <td>{tck[0]}</td>\n                      <td>N{tck[1].reduce((x, y) => x + y)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\nremit.getInitialProps = async function() {\n  let nextToken = null;\n  let results = [];\n  let errors;\n  let raw = {};\n  let tickets = {};\n  try {\n    do {\n      raw = await API.graphql(\n        graphqlOperation(queries.listTickets, {\n          limit: 10000,\n          nextToken: nextToken\n        })\n      );\n      nextToken = raw.data.listTickets.nextToken;\n      raw.data.listTickets.items.map(value => results.push(value));\n    } while (nextToken);\n  } catch (error) {\n    errors = error;\n  }\n  results.map(t => {\n    if (!tickets[t.deviceName]) {\n      tickets[t.deviceName] = [];\n    }\n    tickets[t.deviceName].push(parseInt(t.fee));\n  });\n  return { data: tickets, errors: errors };\n};\n\nexport default remit;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAcA;;;;AAlDA;AACA;AAmDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAFA;AACA;AAVA;AAQA;AAMA;AACA;AAAA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAzBA;AA0BA;AAAA;AAAA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA4BA;;;;A","sourceRoot":""}