{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\nAmplify.configure(awsconfig);\n\nclass Page extends Component {\n  render() {\n    Auth.currentAuthenticatedUser({\n      bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n\n    }).then(user => console.log(user)).catch(err => console.log(err));\n\n    async function SignIn() {\n      try {\n        const user = await Auth.signIn(username, password);\n\n        if (user.challengeName === \"SMS_MFA\" || user.challengeName === \"SOFTWARE_TOKEN_MFA\") {\n          // You need to get the code from the UI inputs\n          // and then trigger the following function with a button click\n          const code = getCodeFromUserInput(); // If MFA is enabled, sign-in should be confirmed with the confirmation code\n\n          const loggedUser = await Auth.confirmSignIn(user, // Return object from Auth.signIn()\n          code, // Confirmation code\n          mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n          );\n        } else if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n          const {\n            requiredAttributes\n          } = user.challengeParam; // the array of required attributes, e.g ['email', 'phone_number']\n          // You need to get the new password and required attributes from the UI inputs\n          // and then trigger the following function with a button click\n          // For example, the email and phone_number are required attributes\n\n          const {\n            username,\n            email,\n            phone_number\n          } = getInfoFromUserInput();\n          const loggedUser = await Auth.completeNewPassword(user, // the Cognito User Object\n          newPassword, // the new password\n          // OPTIONAL, the required attributes\n          {\n            email,\n            phone_number\n          });\n        } else if (user.challengeName === \"MFA_SETUP\") {\n          // This happens when the MFA method is TOTP\n          // The user needs to setup the TOTP before using it\n          // More info please check the Enabling MFA part\n          Auth.setupTOTP(user);\n        } else {\n          // The user directly signs in\n          console.log(user);\n        }\n      } catch (err) {\n        if (err.code === \"UserNotConfirmedException\") {// The error happens if the user didn't finish the confirmation step when signing up\n          // In this case you need to resend the code and confirm the user\n          // About how to resend the code and confirm the user, please check the signUp part\n        } else if (err.code === \"PasswordResetRequiredException\") {// The error happens when the password is reset in the Cognito console\n          // In this case you need to call forgotPassword to reset the password\n          // Please check the Forgot Password part.\n        } else if (err.code === \"NotAuthorizedException\") {// The error happens when the incorrect password is provided\n        } else if (err.code === \"UserNotFoundException\") {// The error happens when the supplied username/email does not exist in the Cognito user pool\n        } else {\n          console.log(err);\n        }\n      }\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Meta, null), __jsx(\"main\", {\n      className: \"content\"\n    }, __jsx(Header, null), this.props.children, __jsx(Footer, null)));\n  }\n\n}\n\nexport default withAuthenticator(Page, true);","map":null,"metadata":{},"sourceType":"module"}