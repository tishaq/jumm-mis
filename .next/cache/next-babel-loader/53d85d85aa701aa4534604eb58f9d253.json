{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Meta from \"./Meta\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"../src/aws-exports\";\nAmplify.configure(awsconfig);\n\nvar Page =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Page, _Component);\n\n  function Page() {\n    _classCallCheck(this, Page);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Page).apply(this, arguments));\n  }\n\n  _createClass(Page, [{\n    key: \"render\",\n    value: function render() {\n      Auth.currentAuthenticatedUser({\n        bypassCache: false // Optional, By default is false. If set to true, this call will send a request to Cognito to get the latest user data\n\n      }).then(function (user) {\n        return console.log(user);\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n\n      function SignIn() {\n        var user, code, loggedUser, requiredAttributes, _getInfoFromUserInput, _username, email, phone_number, _loggedUser;\n\n        return _regeneratorRuntime.async(function SignIn$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(Auth.signIn(username, password));\n\n              case 3:\n                user = _context.sent;\n\n                if (!(user.challengeName === \"SMS_MFA\" || user.challengeName === \"SOFTWARE_TOKEN_MFA\")) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // You need to get the code from the UI inputs\n                // and then trigger the following function with a button click\n                code = getCodeFromUserInput(); // If MFA is enabled, sign-in should be confirmed with the confirmation code\n\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(Auth.confirmSignIn(user, // Return object from Auth.signIn()\n                code, // Confirmation code\n                mfaType // MFA Type e.g. SMS_MFA, SOFTWARE_TOKEN_MFA\n                ));\n\n              case 8:\n                loggedUser = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 11:\n                if (!(user.challengeName === \"NEW_PASSWORD_REQUIRED\")) {\n                  _context.next = 19;\n                  break;\n                }\n\n                requiredAttributes = user.challengeParam.requiredAttributes; // the array of required attributes, e.g ['email', 'phone_number']\n                // You need to get the new password and required attributes from the UI inputs\n                // and then trigger the following function with a button click\n                // For example, the email and phone_number are required attributes\n\n                _getInfoFromUserInput = getInfoFromUserInput(), _username = _getInfoFromUserInput.username, email = _getInfoFromUserInput.email, phone_number = _getInfoFromUserInput.phone_number;\n                _context.next = 16;\n                return _regeneratorRuntime.awrap(Auth.completeNewPassword(user, // the Cognito User Object\n                newPassword, // the new password\n                // OPTIONAL, the required attributes\n                {\n                  email: email,\n                  phone_number: phone_number\n                }));\n\n              case 16:\n                _loggedUser = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 19:\n                if (user.challengeName === \"MFA_SETUP\") {\n                  // This happens when the MFA method is TOTP\n                  // The user needs to setup the TOTP before using it\n                  // More info please check the Enabling MFA part\n                  Auth.setupTOTP(user);\n                } else {\n                  // The user directly signs in\n                  console.log(user);\n                }\n\n              case 20:\n                _context.next = 25;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0.code === \"UserNotConfirmedException\") {// The error happens if the user didn't finish the confirmation step when signing up\n                  // In this case you need to resend the code and confirm the user\n                  // About how to resend the code and confirm the user, please check the signUp part\n                } else if (_context.t0.code === \"PasswordResetRequiredException\") {// The error happens when the password is reset in the Cognito console\n                  // In this case you need to call forgotPassword to reset the password\n                  // Please check the Forgot Password part.\n                } else if (_context.t0.code === \"NotAuthorizedException\") {// The error happens when the incorrect password is provided\n                } else if (_context.t0.code === \"UserNotFoundException\") {// The error happens when the supplied username/email does not exist in the Cognito user pool\n                } else {\n                  console.log(_context.t0);\n                }\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 22]]);\n      }\n\n      return __jsx(React.Fragment, null, __jsx(Meta, null), __jsx(\"main\", {\n        className: \"content\"\n      }, __jsx(Header, null), this.props.children, __jsx(Footer, null)));\n    }\n  }]);\n\n  return Page;\n}(Component);\n\nexport default withAuthenticator(Page, true);","map":null,"metadata":{},"sourceType":"module"}